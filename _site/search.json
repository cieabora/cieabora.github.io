[
  
    {
      "title"    : "[SWIFT]Closure",
      "title-lower"    : "[swift]closure",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "Swift",
      "tags"     : "",
      "url"      : "/swift/2022/06/23/closure.html",
      "date"     : "2022-06-23 13:40:00 +0900",
      "content"     : "Swift에서 함수는 이름이 있는 클로저이다. 즉, 클로저는 함수의 상위 개념이다. 파이썬에서 lambda와 유사한 것 같다.String을 반환하는 기본적은 클로저의 정의는 아래와 같다.let myRealName : (String) -&amp;gt; String = {(name: String) -&amp;gt; String in    return &q..."
    } ,
  
    {
      "title"    : "[SWIFT]Generic",
      "title-lower"    : "[swift]generic",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "Swift",
      "tags"     : "",
      "url"      : "/swift/2022/06/22/generic.html",
      "date"     : "2022-06-22 14:00:00 +0900",
      "content"     : "Swift에는 Generic이라는 개념이 존재한다. 제네릭이란 C++에서 함수의 템플릿과 거의 동일한데 데이터의 타입을 미리 정하지 않고 유동적으로 바꾸는 것이다.struct myArray&amp;lt;T&amp;gt;{    var elements : [T] = [T]()}위는 기본적인 포맷이다. 밑은 예제이다.struct myArray&amp;lt..."
    } ,
  
    {
      "title"    : "[SWIFT]Method Parameter Name",
      "title-lower"    : "[swift]method parameter name",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "Swift",
      "tags"     : "",
      "url"      : "/swift/2022/06/21/method_parameter.html",
      "date"     : "2022-06-21 16:04:00 +0900",
      "content"     : "메소드의 매개변수의 이름은 기본적으로 메소드를 정의할 때와 메소드를 호출할 때 동일하게 쓰인다.// 메소드 정의func myFunction(name: String) -&amp;gt; String{    return &quot;안녕하세요?! \(name) 입니다.&quot;}// 메소드 호출myFunction(name: &quot;씅우&quot;)그런데..."
    } ,
  
    {
      "title"    : "[SWIFT]Property Observer",
      "title-lower"    : "[swift]property observer",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "Swift",
      "tags"     : "",
      "url"      : "/swift/2022/06/21/property_observer.html",
      "date"     : "2022-06-21 15:48:00 +0900",
      "content"     : "프로퍼티 옵저버란 값이 변할 때 함수를 실행하는 기능이다.var myAge = 0{    willSet{        print(&quot;값이 설정될 예정이다. / myAge: \(myAge)&quot;)    }    didSet{        print(&quot;값이 설정되었다. / myAge: \(myAge)&quot;)    }}willSe..."
    } ,
  
    {
      "title"    : "[SWIFT]Struct and Class",
      "title-lower"    : "[swift]struct and class",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "Swift",
      "tags"     : "",
      "url"      : "/swift/2022/06/20/swift_class.html",
      "date"     : "2022-06-20 04:02:00 +0900",
      "content"     : "swift에도 struct와 class라는 개념이 있다.구조체를 선언할 때에는 아래와 같이 선언할 수 있다.// 유튜버 (데이터) 모델 - struct / 구조체struct YoutuberStruct{    var name : String    var subscriberCount : Int}이 구조체의 객체를 만들 때에는var devPark = You..."
    } ,
  
    {
      "title"    : "[JAVA]java start",
      "title-lower"    : "[java]java start",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "java",
      "tags"     : "",
      "url"      : "/java/2022/06/16/java_start.html",
      "date"     : "2022-06-16 09:47:00 +0900",
      "content"     : "자바의 기본 포맷은 아래와 같다.public class Sample{    public static void main(String args[]){        System.out.println(&quot;hello java!&quot;);    }}여기서 주의할 점은 자바의 파일 이름과 매인 클래스의 이름이 같아야 한다.자바에서의 배열은 C언어와 유사..."
    } ,
  
    {
      "title"    : "[SWIFT]Optional Value and Unwrapping",
      "title-lower"    : "[swift]optional value and unwrapping",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "Swift",
      "tags"     : "",
      "url"      : "/swift/2022/06/16/unwrap.html",
      "date"     : "2022-06-16 05:47:00 +0900",
      "content"     : "옵셔널 값이란 값이 있는지 없는지 모르는 값이다. 선언은 아래와 같이 한다.var someVariable: Int? = nil변수 선언과 유사한데 데이터 타입 뒤에 물음표의 유무 차이이다. 여기서 이 변수에 값을 넣어줄 수 있는데if someVariable == nil{    someVariable = 90}print(someVariable)이러면 일..."
    } ,
  
    {
      "title"    : "[SWIFT]for statement",
      "title-lower"    : "[swift]for statement",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "Swift",
      "tags"     : "",
      "url"      : "/swift/2022/06/16/for_state.html",
      "date"     : "2022-06-16 05:19:00 +0900",
      "content"     : "swift에서의 for문은 파이썬과 유사하다.range(0, 6) 대신에 0..&amp;lt;6 을 쓰거나 0…5를 쓴다.그리고 where로 조건을 추가할 수 있는데for i in 0..&amp;lt;5 where i % 2 == 0{    print(&quot;even number: \(i)&quot;)}위와 같이 조건을 추가하면 짝수만 출력이 된다..."
    } ,
  
    {
      "title"    : "[SWIFT]enum statement",
      "title-lower"    : "[swift]enum statement",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "Swift",
      "tags"     : "",
      "url"      : "/swift/2022/06/16/enum.html",
      "date"     : "2022-06-16 04:50:00 +0900",
      "content"     : "Swift에는 enum이라는 데이터 타입이 있는데 클래스와 유사한 것 같다.enum School{//    case elementary//    case middle//    case high    case elementary, middle, high}위와 같은 꼴로 선언한다. 그리고 Swift에서는 상수를 선언할 때 let이라는 키워드를 사용하는데l..."
    } ,
  
    {
      "title"    : "[SWIFT]for each statement of Swift",
      "title-lower"    : "[swift]for each statement of swift",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "Swift",
      "tags"     : "",
      "url"      : "/swift/2022/06/15/swift_for.html",
      "date"     : "2022-06-15 00:00:00 +0900",
      "content"     : "swift에서는 배열을 선언할 때var 배열이름 : [데이터타입] = [데이터들~]  의 꼴로 선언한다.그리고 for문은 python과 유사하고 where로 조건을 추가할 수 있다.그리고 데이터 포맷팅을 할 때에는 파이썬의 f스트링과 비슷하고() 로 포멧팅을 하는 것 처럼 보인다.import UIKit// 콜렉션 : 데이터를 모아둔 것// 배열, 셋,..."
    } ,
  
    {
      "title"    : "[SWIFT]Start Swift",
      "title-lower"    : "[swift]start swift",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "Swift",
      "tags"     : "",
      "url"      : "/swift/2022/06/15/start_swift.html",
      "date"     : "2022-06-15 00:00:00 +0900",
      "content"     : "swift는 변수를 선언할 때var 변수이름 : 데이터타입 = 값  과 같은 형식으로 선언한다.출력은 파이썬과 유사하게 하고, 문자열을 감쌀 때에는 무조건 쌍 따옴표로 감싸야 한다.if문의 형식은 C언어와 유사하고 한 줄 if문도 가능하다.import UIKit// 다크모드 여부var isDarkMode : Bool = trueif (isDarkMod..."
    } 
  
]