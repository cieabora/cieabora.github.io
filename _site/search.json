[
  
    {
      "title"    : "[ML]week5-Logistic Regression",
      "title-lower"    : "[ml]week5-logistic regression",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "ML",
      "tags"     : "",
      "url"      : "/ml/2022/09/17/ml_study_week5_Logistic_Regression.html",
      "date"     : "2022-09-17 23:49:00 +0900",
      "content"     : ""
    } ,
  
    {
      "title"    : "[ML]week5-Regularized Linear Regression",
      "title-lower"    : "[ml]week5-regularized linear regression",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "ML",
      "tags"     : "",
      "url"      : "/ml/2022/09/17/ml_study_week5_Regularized_Linear_Regression.html",
      "date"     : "2022-09-17 23:09:00 +0900",
      "content"     : "  규제 선형 회귀(Regularized Linear Regression)  규제 선형 회귀란?앞의 예제에서 Degree=15의 다항회귀는 지나치게 모든 데이터에 적합한 회귀식을 만들기 위해서 다항식이 복잡해지고 회귀 계수가 매우 크게 설정이 되면서 과대 적합이 되고 평가 데이터 세트에 대해서 형편 없는 예측 성능을 보였다. 따라서 회귀 모델은 적절히..."
    } ,
  
    {
      "title"    : "[ML]week5-Polynomial Regression",
      "title-lower"    : "[ml]week5-polynomial regression",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "ML",
      "tags"     : "",
      "url"      : "/ml/2022/09/15/ml_study_week5_Polynomial_Regression.html",
      "date"     : "2022-09-15 17:11:00 +0900",
      "content"     : "  다항 회귀(Polynomial Regression  다항 회귀 개요다항 회귀는 회귀식이 독립변수의 단항식이 아닌 2차, 3차 방정식과 같은 다항식으로 표현되는 것.  선형 회귀와 비선형 회귀의 구분다항 회귀는 선형 회귀이다. 회귀에서 선형 회귀/비선형 회귀를 나누는 기준은 회귀 계수가 선형/비선형인지에 따른 것이지 독립변수의 선형/비선형 여부와는 ..."
    } ,
  
    {
      "title"    : "[ML]week5-Linear Regression",
      "title-lower"    : "[ml]week5-linear regression",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "ML",
      "tags"     : "",
      "url"      : "/ml/2022/09/14/ml_study_week5_Linear_Regression.html",
      "date"     : "2022-09-14 18:12:00 +0900",
      "content"     : "  RSS오류 값의 제곱을 구해서 더하는 방식. 일반적으로 미분 등의 계산을 편리하게 하기 위해서 RSS 방식으로 오류 합을 구한다. 즉 에러의 제곱은 RSS.RSS는 회귀식의 독립변수 X, 종속변수 Y가 중심 변수가 아니라 w 변수(회귀 계수)가 중심 변수임을 인지하는 것이 매우 중요하다.(학습 데이터로 입력되는 독립변수와 종속변수는 RSS에서 모두..."
    } ,
  
    {
      "title"    : "[ML]week4-Bayesian Optimization",
      "title-lower"    : "[ml]week4-bayesian optimization",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "ML",
      "tags"     : "",
      "url"      : "/ml/2022/09/10/ml_study_week4_Bayesian_Optimization.html",
      "date"     : "2022-09-10 22:44:00 +0900",
      "content"     : "베이지안 최적화 수행단계최초에는 랜덤하게 하이퍼 파라미터들을 샘플링하여 성능 결과를 관측관측된 값을 기반으로 대체 모델은 최적 함수를 예측 추정획득 함수에서 다음으로 관측할 하이퍼 파라미터를 추출해당 하이퍼 파라미터로 관측된 값을 기반으로 대체 모델은 다시 최적 함수 예측 추정베이지안 최적화 구현 요소입력 값 범위(Search Space)목적 함수의 ..."
    } ,
  
    {
      "title"    : "[ML]week4-Ensemble Learning",
      "title-lower"    : "[ml]week4-ensemble learning",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "ML",
      "tags"     : "",
      "url"      : "/ml/2022/09/10/ml_study_week4_Ensemble.html",
      "date"     : "2022-09-10 12:23:00 +0900",
      "content"     : "앙상블 학습앙상블 학습이란?앙상블 학습이란 여러가지 분류기(classifier)을 두고 각각의 분류기에서 학습과 테스트를 시행해 결과를 도출하는 방식이다. 앙상블의 유형에는 보팅(Voting), 배깅(Bagging), 부스팅(Boosting) 등이 있다.앙상블 학습의 주요 알고리즘배깅 - 랜덤 포레스트(Random Forest)부스팅 - 에이다 부스팅..."
    } ,
  
    {
      "title"    : "[ML]week4-Decision Tree",
      "title-lower"    : "[ml]week4-decision tree",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "ML",
      "tags"     : "",
      "url"      : "/ml/2022/09/10/ml_study_week4_decision_tree.html",
      "date"     : "2022-09-10 08:29:00 +0900",
      "content"     : "Decision TreeDecision Tree의 주요 하이퍼 파라미터max_depth 트리의 최대 깊이를 규정디폴트는 None. None으로 설정하면 완벽하게 클래스 결정 값이 될 때까지 깊이를 계속 키우며 분할하거나 노드가 가지는 데이터 개수가 min_samples_split보다 작아질 때까지 계속 깊이를 증가시킴.깊이가 깊어지면 min_sampl..."
    } ,
  
    {
      "title"    : "[SWIFT]Protocol Associated Type",
      "title-lower"    : "[swift]protocol associated type",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "Swift",
      "tags"     : "",
      "url"      : "/swift/2022/08/15/protocol-Associated-Type.html",
      "date"     : "2022-08-15 02:04:00 +0900",
      "content"     : "프로토콜에서는 associated type이라는 타입이 존재하는데 제네릭과 유사하다. 들어오는 타입을 오토 캐스팅 해주는 키워드인거 같다.protocol PetHaving{    associatedtype T    var pets: [T] { get set }    mutating func gotNewPet(_ newPet: T)}extension P..."
    } ,
  
    {
      "title"    : "[SWIFT]Protocol Extension",
      "title-lower"    : "[swift]protocol extension",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "Swift",
      "tags"     : "",
      "url"      : "/swift/2022/08/15/protocol-Extension.html",
      "date"     : "2022-08-15 01:50:00 +0900",
      "content"     : "프로토콜에서는 정의만 가능하다. 그리고 구현은 할 수 없는데 extension이라는 키워드를 사용하면 구현이 가능하다. 아래의 코드를 보자protocol Naming{    var lastname : String{ get set }    var firstname: String{ get set }    func getName() -&amp;gt; Str..."
    } ,
  
    {
      "title"    : "[SWIFT]Protocol Inheritance",
      "title-lower"    : "[swift]protocol inheritance",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "Swift",
      "tags"     : "",
      "url"      : "/swift/2022/08/15/protocol-inheritance.html",
      "date"     : "2022-08-15 01:41:00 +0900",
      "content"     : "프로토콜도 상속이 가능한데 별 내용은 없다. 아래와 같이 구현하면 된다.protocol Naming{    var name : String{ get set }    func getName() -&amp;gt; String}protocol Aging{    var age: Int{ get set }    }protocol UserNotifiable : ..."
    } ,
  
    {
      "title"    : "[SWIFT]Protocol",
      "title-lower"    : "[swift]protocol",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "Swift",
      "tags"     : "",
      "url"      : "/swift/2022/08/15/protocol.html",
      "date"     : "2022-08-15 01:37:00 +0900",
      "content"     : "어떠한 함수나 클래스, 스트럭트를 만들 때 특정한 이름을 가진 멤버 함수나 멤버 변수를 만들지 않으면 에러를 발생하게 하는 것이 프로토콜이다. 예를 들면, 앱을 만들 때 앱에 어떠한 기능을 빠뜨리지 않기 위해서 쓰일 것 같다. 형식은 아래와 같다.protocol Naming{    var name : String{ get set }    func ge..."
    } ,
  
    {
      "title"    : "[ML]week3-Prediction Evaluation",
      "title-lower"    : "[ml]week3-prediction evaluation",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "ML",
      "tags"     : "",
      "url"      : "/ml/2022/08/13/ml_study_week3.html",
      "date"     : "2022-08-13 06:39:00 +0900",
      "content"     : "정확도(Accuracy)와 오차 행렬(confusion matrix)머신 러닝에서 학습을 기반으로 한 예측의 결과는 아래의 표와 같이 4가지로 분류할 수 있다.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbs..."
    } ,
  
    {
      "title"    : "[ML]week2-scikit learn",
      "title-lower"    : "[ml]week2-scikit learn",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "ML",
      "tags"     : "",
      "url"      : "/ml/2022/08/07/ml_study_week2.html",
      "date"     : "2022-08-07 22:37:00 +0900",
      "content"     : "아이리스 품종 예측하기아래와 같은 코드로 아이리스 예측을 위한 데이터 셋을 로딩할 수 있다.from sklearn.datasets import load_irisimport pandas as pd# 아이리스 데이터 셋 로딩iris = load_iris()아이리스를 예측하기 위한 피쳐 값, 피쳐 이름, 레이블 값, 레이블 이름 등은 아래와 같이 정리돼 있..."
    } ,
  
    {
      "title"    : "[ML]week1",
      "title-lower"    : "[ml]week1",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "ML",
      "tags"     : "",
      "url"      : "/ml/2022/07/31/ml_study_week1.html",
      "date"     : "2022-07-31 23:40:00 +0900",
      "content"     : "ndarraynumpy는 선형대수를 구현하기 위해 만든 파이썬 라이브러리이다. array 함수로 ndarray 객체를 생성할 수 있다.import numpy as nparr1 = np.array([1, 2, 3, 4], dtype = &#39;int32&#39;)array 를 조작하는 함수들이 있는데 아래와 같다.arr2 = np.zeros((3, 2..."
    } ,
  
    {
      "title"    : "[SWIFT]Parameter Inout",
      "title-lower"    : "[swift]parameter inout",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "Swift",
      "tags"     : "",
      "url"      : "/swift/2022/06/23/parameter_modify.html",
      "date"     : "2022-06-23 14:29:00 +0900",
      "content"     : "메소드 안에서 파라미터를 변경하려고 하면 에러가 발생한다.func error_func(_ name: String){    name = &quot;개발하는 &quot; + name    print(&quot;안녕?! 난 \(name) 라고 해&quot;)}error message:expression failed to parse:error: ex1.pla..."
    } ,
  
    {
      "title"    : "[SWIFT]Final Class",
      "title-lower"    : "[swift]final class",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "Swift",
      "tags"     : "",
      "url"      : "/swift/2022/06/23/final_class.html",
      "date"     : "2022-06-23 14:08:00 +0900",
      "content"     : "swift에는 final class라고 상속이 되지 않는 클래스가 있다.import UIKitfinal class Friend{    var name: String        init(name: String){        self.name = name    }}class BestFriend: Friend{        override init(na..."
    } ,
  
    {
      "title"    : "[SWIFT]Dictionary",
      "title-lower"    : "[swift]dictionary",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "Swift",
      "tags"     : "",
      "url"      : "/swift/2022/06/23/dict.html",
      "date"     : "2022-06-23 14:08:00 +0900",
      "content"     : "Swift에서의 딕셔너리는 파이썬과 비슷하다. 그래서 다른 점만 간단하게 포스팅 하겠다.1. 처음 캐스팅 된 값으로 계속 해야한다.  2. {}가 아니라 []이다.  3. 딕셔너리에 없는 값을 출력하려고 하면 에러가 나지 않고 nil이 나온다.  4. 값을 업데이트 할 때에는 updateValue 멤버 함수를 써야한다.  5. 빈 딕셔너리를 만드는 방..."
    } ,
  
    {
      "title"    : "[SWIFT]Closure",
      "title-lower"    : "[swift]closure",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "Swift",
      "tags"     : "",
      "url"      : "/swift/2022/06/23/closure.html",
      "date"     : "2022-06-23 13:40:00 +0900",
      "content"     : "Swift에서 함수는 이름이 있는 클로저이다. 즉, 클로저는 함수의 상위 개념이다. 파이썬에서 lambda와 유사한 것 같다.String을 반환하는 기본적은 클로저의 정의는 아래와 같다.let myRealName : (String) -&amp;gt; String = {(name: String) -&amp;gt; String in    return &q..."
    } ,
  
    {
      "title"    : "[SWIFT]Generic",
      "title-lower"    : "[swift]generic",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "Swift",
      "tags"     : "",
      "url"      : "/swift/2022/06/22/generic.html",
      "date"     : "2022-06-22 14:00:00 +0900",
      "content"     : "Swift에는 Generic이라는 개념이 존재한다. 제네릭이란 C++에서 함수의 템플릿과 거의 동일한데 데이터의 타입을 미리 정하지 않고 유동적으로 바꾸는 것이다.struct myArray&amp;lt;T&amp;gt;{    var elements : [T] = [T]()}위는 기본적인 포맷이다. 밑은 예제이다.struct myArray&amp;lt..."
    } ,
  
    {
      "title"    : "[SWIFT]Method Parameter Name",
      "title-lower"    : "[swift]method parameter name",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "Swift",
      "tags"     : "",
      "url"      : "/swift/2022/06/21/method_parameter.html",
      "date"     : "2022-06-21 16:04:00 +0900",
      "content"     : "메소드의 매개변수의 이름은 기본적으로 메소드를 정의할 때와 메소드를 호출할 때 동일하게 쓰인다.// 메소드 정의func myFunction(name: String) -&amp;gt; String{    return &quot;안녕하세요?! \(name) 입니다.&quot;}// 메소드 호출myFunction(name: &quot;씅우&quot;)그런데..."
    } ,
  
    {
      "title"    : "[SWIFT]Property Observer",
      "title-lower"    : "[swift]property observer",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "Swift",
      "tags"     : "",
      "url"      : "/swift/2022/06/21/property_observer.html",
      "date"     : "2022-06-21 15:48:00 +0900",
      "content"     : "프로퍼티 옵저버란 값이 변할 때 함수를 실행하는 기능이다.var myAge = 0{    willSet{        print(&quot;값이 설정될 예정이다. / myAge: \(myAge)&quot;)    }    didSet{        print(&quot;값이 설정되었다. / myAge: \(myAge)&quot;)    }}willSe..."
    } ,
  
    {
      "title"    : "[SWIFT]Struct and Class",
      "title-lower"    : "[swift]struct and class",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "Swift",
      "tags"     : "",
      "url"      : "/swift/2022/06/20/swift_class.html",
      "date"     : "2022-06-20 04:02:00 +0900",
      "content"     : "swift에도 struct와 class라는 개념이 있다.구조체를 선언할 때에는 아래와 같이 선언할 수 있다.// 유튜버 (데이터) 모델 - struct / 구조체struct YoutuberStruct{    var name : String    var subscriberCount : Int}이 구조체의 객체를 만들 때에는var devPark = You..."
    } ,
  
    {
      "title"    : "[JAVA]java start",
      "title-lower"    : "[java]java start",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "java",
      "tags"     : "",
      "url"      : "/java/2022/06/16/java_start.html",
      "date"     : "2022-06-16 09:47:00 +0900",
      "content"     : "자바의 기본 포맷은 아래와 같다.public class Sample{    public static void main(String args[]){        System.out.println(&quot;hello java!&quot;);    }}여기서 주의할 점은 자바의 파일 이름과 매인 클래스의 이름이 같아야 한다.자바에서의 배열은 C언어와 유사..."
    } ,
  
    {
      "title"    : "[SWIFT]Optional Value and Unwrapping",
      "title-lower"    : "[swift]optional value and unwrapping",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "Swift",
      "tags"     : "",
      "url"      : "/swift/2022/06/16/unwrap.html",
      "date"     : "2022-06-16 05:47:00 +0900",
      "content"     : "옵셔널 값이란 값이 있는지 없는지 모르는 값이다. 선언은 아래와 같이 한다.var someVariable: Int? = nil변수 선언과 유사한데 데이터 타입 뒤에 물음표의 유무 차이이다. 여기서 이 변수에 값을 넣어줄 수 있는데if someVariable == nil{    someVariable = 90}print(someVariable)이러면 일..."
    } ,
  
    {
      "title"    : "[SWIFT]for statement",
      "title-lower"    : "[swift]for statement",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "Swift",
      "tags"     : "",
      "url"      : "/swift/2022/06/16/for_state.html",
      "date"     : "2022-06-16 05:19:00 +0900",
      "content"     : "swift에서의 for문은 파이썬과 유사하다.range(0, 6) 대신에 0..&amp;lt;6 을 쓰거나 0…5를 쓴다.그리고 where로 조건을 추가할 수 있는데for i in 0..&amp;lt;5 where i % 2 == 0{    print(&quot;even number: \(i)&quot;)}위와 같이 조건을 추가하면 짝수만 출력이 된다..."
    } ,
  
    {
      "title"    : "[SWIFT]enum statement",
      "title-lower"    : "[swift]enum statement",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "Swift",
      "tags"     : "",
      "url"      : "/swift/2022/06/16/enum.html",
      "date"     : "2022-06-16 04:50:00 +0900",
      "content"     : "Swift에는 enum이라는 데이터 타입이 있는데 클래스와 유사한 것 같다.enum School{//    case elementary//    case middle//    case high    case elementary, middle, high}위와 같은 꼴로 선언한다. 그리고 Swift에서는 상수를 선언할 때 let이라는 키워드를 사용하는데l..."
    } ,
  
    {
      "title"    : "[SWIFT]for each statement of Swift",
      "title-lower"    : "[swift]for each statement of swift",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "Swift",
      "tags"     : "",
      "url"      : "/swift/2022/06/15/swift_for.html",
      "date"     : "2022-06-15 00:00:00 +0900",
      "content"     : "swift에서는 배열을 선언할 때var 배열이름 : [데이터타입] = [데이터들~]  의 꼴로 선언한다.그리고 for문은 python과 유사하고 where로 조건을 추가할 수 있다.그리고 데이터 포맷팅을 할 때에는 파이썬의 f스트링과 비슷하고() 로 포멧팅을 하는 것 처럼 보인다.import UIKit// 콜렉션 : 데이터를 모아둔 것// 배열, 셋,..."
    } ,
  
    {
      "title"    : "[SWIFT]Start Swift",
      "title-lower"    : "[swift]start swift",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "Swift",
      "tags"     : "",
      "url"      : "/swift/2022/06/15/start_swift.html",
      "date"     : "2022-06-15 00:00:00 +0900",
      "content"     : "swift는 변수를 선언할 때var 변수이름 : 데이터타입 = 값  과 같은 형식으로 선언한다.출력은 파이썬과 유사하게 하고, 문자열을 감쌀 때에는 무조건 쌍 따옴표로 감싸야 한다.if문의 형식은 C언어와 유사하고 한 줄 if문도 가능하다.import UIKit// 다크모드 여부var isDarkMode : Bool = trueif (isDarkMod..."
    } 
  
]